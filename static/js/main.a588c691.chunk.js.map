{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["paginate","data","currentPage","numberOfRecords","paginatedData","startPosition","i","itemsPerPage","useState","searchData","Number","history","useHistory","setScreen","isFiltered","number","setFilteredDataList","setTotal","setCurrent","setCurrentPage","setPaginationData","useEffect","setDataList","dataSet","console","paginationConfig","totalPages","numberOfItemsPerPage","Math","total","showMax","prevNext","activeBgColor","activeBorderColor","color","onClick","page","filteredDataList","fluid","sm","md","lg","xl","size","className","type","name","placeholder","onChange","e","criteria","setSearchCriteriaValue","dataList","item","String","searchCriteria","value","searchCriteriaValue","SplitButton","as","key","id","title","label","Dropdown","setSearchCriteria","eventKey","index","setNumberOfStaffPerPage","style","wordBreak","tableData","paginationData","current","email","address","searchBy","App","handleItemClick","itemClickRedirect","ReactDOM","render","document","getElementById"],"mappings":"qVAaMA,EAAW,SAACC,EAAMC,EAAaC,GAGnC,IAFA,IAAIC,EAAJ,GACMC,EAAgBH,EAAtB,EAEMI,EADN,EAEEA,EAAID,EAAJC,GAAuCA,EAAIL,EAF7C,OAGEK,IAEAF,OAAmBH,EAAnBG,IAEF,U,MAEF,SAAyB,GAOtB,IAPsB,EAOtB,EAPsB,UAOtB,EAPsB,aAOtB,EAPsB,YAOtB,EAPsB,kBAOtB,EAPsB,kBAMvBG,EACC,EADDA,aACC,EAC+BC,mBAAhC,GADC,mBACK,EADL,KACK,EADL,OAE+CA,mBAAhD,IAFC,mBAEK,EAFL,KAEK,EAFL,OAG2CA,mBAASC,EAArD,IAHC,mBAGK,EAHL,KAGK,EAHL,OAIqDD,mBAAtD,IAJC,mBAIK,EAJL,KAIK,EAJL,OAK2CA,mBAA5C,IALC,mBAKK,EALL,KAKK,EALL,OAMyBA,mBAA1B,GANC,mBAMK,EANL,KAMK,EANL,OAO6BA,mBAA9B,GAPC,mBAOK,EAPL,KAOK,EAPL,OAQqCA,mBAAtC,GARC,mBAQK,EARL,KAQK,EARL,OASuDA,mBACtDE,OADF,IATC,mBASK,EATL,KASK,GATL,KAYGC,GAAUC,cAiBRC,GAAY,SAACZ,EAAMa,EAAYC,GACnCC,EAAoBF,EAAab,EAAjCe,IACAC,EAAShB,EAATgB,QACAC,EAAWjB,aAAXiB,GACAC,KACAC,EAAkBpB,EAASC,EAAM,EAAjCmB,KAwBFC,qBAAU,WAjCRC,KACAT,GAAUU,GAAS,EAAnBV,GAkCAW,2BACC,CAHHH,IAKA,IAAII,GAAmB,CACrBC,WACEC,IAA2BC,UAAUC,EAArCF,GAFmB,EAGrBzB,YAAaA,EAHQ,EAIrB4B,QAJqB,GAKrBC,UALqB,EAMrBC,cANqB,YAOrBC,kBAPqB,YAQrBC,MARqB,aASrBC,QAAS,YACHC,IAASlC,EAAb,IACEiB,EAAeiB,EAAfjB,GACAC,EACEpB,EACEqC,aADM,EAEND,EAFM,EADVhB,IAOAF,EAAWkB,SAAkBA,EAAD,KAA5BlB,MAIN,OACE,uBAAWoB,OAAX,EAAiBC,GAAjB,KAAyBC,GAAzB,KAAiCC,GAAjC,KAAyCC,GAAG,MAC1C,2BAEE,uBAAKC,KAAL,KAAeJ,GAAf,KAAuBC,GAAvB,KAA+BC,GAA/B,KAAuCC,GAAG,MACxC,2BACE,uBAAKH,GAAL,KAAaC,GAAb,KAAqBC,GAAG,MACtB,yBAAKG,UAAW,0BACd,yBAAKA,UAAW,2BACd,2BACEC,KADF,OAEEC,KAFF,SAGEC,YAHF,gBAIEC,SAlDKC,YAZGC,OAaxBC,EAAuBF,SAAvBE,OACA,KAAIF,gBAIJpC,IAlBwBqC,EAkBGD,SAAlB,MAjBFG,EAAA,QAAiBC,YACtB,OACEC,OAAOD,EAAKE,EAAZD,6BAEYJ,EAHd,eAKSG,EACT,QAUO,EAATxC,GAHEA,GAAUuC,GAAU,EAApBvC,IAgDc2C,MAAOC,IAER,CAACC,EAAD,QAAkB,qBACjB,qBACEC,GADF,IAEEC,IAFF,EAGEC,GAAE,+BAHJ,GAIElB,KAJF,KAKEmB,MAAOP,EAAeQ,OAErBtD,OAAe,qBACd,kBAACuD,EAAA,EAAD,MACEJ,IADF,EAEEzB,QAAUc,YACRgB,KACAd,MACAtC,GAAUuC,GAAU,EAApBvC,IAEFqD,SAAUC,GAETjB,EA3Bb,eAiCE,yBAAKN,UAAU,2BACb,+BADF,kBAEE,2BACEC,KADF,SAEEC,KAFF,uBAGEE,SArHkBC,YAClCmB,GAAwB1D,OAAOuC,SAA/BmB,QAEAvD,GACEwB,aADO,EAEPA,WACA3B,OAAOuC,SAHTpC,SAmHgB2C,MAAO7B,QAMjB,2BACE,2BACE,2BACE0C,MAAO,CAAEC,UAAW,aACpB1B,UAAU,oCAEV,+BACE,4BACG2B,EAAA,KAAc,qBACb,wBAAIX,IAAKO,GAAQlE,EAPzB,YAWE,+BACGuE,EAAA,KAAmB,qBAClB,wBACErC,QAAS,WACP,GACExB,cAEJiD,IAAKO,GAEJI,OAAc,qBACb,wBAAIX,IAAKO,GAAQd,EAAKpD,EAvEtC,iBAgFE,+CAAsB,cAhFxB,KAiFE,yBAAK2C,UAAU,sBACb,+BACGjB,cAA8B8C,EAA9B9C,kBAvFb,eC/GI1B,G,YAAO,CACX,CAAE6C,KAAM,QAAS4B,MAAO,kBAAmBC,QAAS,cACpD,CAAE7B,KAAM,WAAY4B,MAAO,wBAAyBC,QAAS,gBAC7D,CAAE7B,KAAM,OAAQ4B,MAAO,gBAAiBC,QAAS,eAK7CC,EAAW,CACf,CACE,CAAEb,MAAO,OAAQH,IAAK,QACtB,CAAEG,MAAO,QAASH,IAAK,WAMrBW,EAAY,CAChB,CAAER,MAAO,OAAQH,IAAK,QACtB,CAAEG,MAAO,QAASH,IAAK,SACvB,CAAEG,MAAO,iBAAkBH,IAAK,YAenBiB,EAbH,WACV,OACE,kBAAC,EAAD,CACEtD,QAAStB,EACTQ,WAAYmE,EACZL,UAAWA,EACXO,iBAAiB,EACjBC,mBAAmB,EACnBxE,aAAc,MC/BpByE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.a588c691.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport { useHistory } from 'react-router-dom'\nimport Pagination from 'react-bootstrap-4-pagination'\nimport {\n  SplitButton,\n  Dropdown,\n  ButtonGroup,\n  Row,\n  Col,\n  Container\n} from 'react-bootstrap'\n\nconst paginate = (data, currentPage, numberOfRecords) => {\n  let paginatedData = []\n  const startPosition = currentPage * numberOfRecords\n  for (\n    let i = startPosition;\n    i < startPosition + numberOfRecords && i < data.length;\n    i++\n  ) {\n    paginatedData.push(data[i])\n  }\n  return paginatedData\n}\nfunction PaginationTable({\n  dataSet,\n  searchData,\n  tableData,\n  handleItemClick,\n  itemClickRedirect,\n  itemsPerPage\n}) {\n  const [dataList, setDataList] = useState(dataSet) // ful of data passed in.\n  const [filteredDataList, setFilteredDataList] = useState([]) // list og items that meet seacrh criteria\n  const [searchCriteria, setSearchCriteria] = useState(searchData[0]) // Search by\n  const [searchCriteriaValue, setSearchCriteriaValue] = useState('')\n  const [paginationData, setPaginationData] = useState([]) // Items to  be displayed on screen depending on how many per page\n  const [total, setTotal] = useState(0) // Sum of total items listed on screen\n  const [current, setCurrent] = useState(0) // Displaying value of 1st item member on screen (ie 1 of 5)\n  const [currentPage, setCurrentPage] = useState(0) // Current page of pagination\n  const [numberOfItemsPerPage, setNumberOfStaffPerPage] = useState(\n    Number(itemsPerPage)\n  ) // How many items to display per screen (pagination)\n  let history = useHistory()\n\n  const changeNumberOfItemsPerPage = (e) => {\n    setNumberOfStaffPerPage(Number(e.target.value))\n\n    setScreen(\n      filteredDataList.length > 0 ? filteredDataList : dataList,\n      filteredDataList.length > 0 ? true : false,\n      Number(e.target.value)\n    )\n  }\n  // load data and set screen and pagination.\n  const loadData = () => {\n    setDataList(dataSet)\n    setScreen(dataSet, false, numberOfItemsPerPage)\n  }\n\n  const setScreen = (data, isFiltered, number) => {\n    setFilteredDataList(isFiltered ? data : [])\n    setTotal(data.length)\n    setCurrent(data.length > 0 ? 1 : 0)\n    setCurrentPage(0)\n    setPaginationData(paginate(data, 0, number))\n  }\n\n  const getFilteredItems = (criteria) => {\n    return dataList.filter((item) => {\n      if (\n        String(item[searchCriteria.key])\n          .toLowerCase()\n          .includes(criteria.toLowerCase())\n      )\n        return item\n      return ''\n    })\n  }\n  // Return List of items that meet search criteria\n  const searchForItem = (e) => {\n    setSearchCriteriaValue(e.target.value)\n    if (e.target.value === '') {\n      setScreen(dataList, false, numberOfItemsPerPage)\n      return\n    }\n    setScreen(getFilteredItems(e.target.value), true, numberOfItemsPerPage)\n  }\n\n  useEffect(() => {\n    loadData()\n    console.log('useeffect')\n  }, [dataSet])\n\n  let paginationConfig = {\n    totalPages:\n      numberOfItemsPerPage > 0 ? Math.ceil(total / numberOfItemsPerPage) : 0,\n    currentPage: currentPage + 1,\n    showMax: 20,\n    prevNext: true,\n    activeBgColor: 'dogerblue',\n    activeBorderColor: 'dogerblue',\n    color: 'dodgerblue',\n    onClick: function (page) {\n      if (page !== currentPage + 1) {\n        setCurrentPage(page - 1)\n        setPaginationData(\n          paginate(\n            filteredDataList.length > 0 ? filteredDataList : dataList,\n            page - 1,\n            numberOfItemsPerPage\n          )\n        )\n        setCurrent(page === 1 ? 1 : (page - 1) * numberOfItemsPerPage + 1)\n      }\n    }\n  }\n  return (\n    <Container fluid sm='12' md='12' lg='12' xl='12'>\n      <Row>\n        {/* <Col size=\"12\" sm=\"4\" md=\"4\" lg=\"2\" xl=\"2\"></Col> */}\n        <Col size='12' sm='12' md='12' lg='12' xl='12'>\n          <Row>\n            <Col sm='12' md='12' lg='12'>\n              <div className={'pagination-list-search'}>\n                <div className={'pagination-space-evenly'}>\n                  <input\n                    type='text'\n                    name='search'\n                    placeholder='Search by ...'\n                    onChange={searchForItem}\n                    value={searchCriteriaValue}\n                  />\n                  {[SplitButton].map((DropdownType, idx) => (\n                    <DropdownType\n                      as={ButtonGroup}\n                      key={idx}\n                      id={`dropdown-button-drop-${idx}`}\n                      size='sm'\n                      title={searchCriteria.label}\n                    >\n                      {searchData.map((criteria, index) => (\n                        <Dropdown.Item\n                          key={index}\n                          onClick={(e) => {\n                            setSearchCriteria(criteria)\n                            setSearchCriteriaValue('')\n                            setScreen(dataList, false, numberOfItemsPerPage)\n                          }}\n                          eventKey={index}\n                        >\n                          {criteria.label}\n                        </Dropdown.Item>\n                      ))}\n                    </DropdownType>\n                  ))}\n                </div>\n                <div className='pagination-space-evenly'>\n                  <label>Items per page</label>\n                  <input\n                    type='number'\n                    name='numberOfItemsPerPage'\n                    onChange={changeNumberOfItemsPerPage}\n                    value={numberOfItemsPerPage}\n                  />\n                </div>\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <table\n                style={{ wordBreak: 'break-all' }}\n                className='table table-bordered table-hover'\n              >\n                <thead>\n                  <tr>\n                    {tableData.map((data, index) => (\n                      <th key={index}>{data.label}</th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {paginationData.map((item, index) => (\n                    <tr\n                      onClick={() => {\n                        if (handleItemClick)\n                          history.push(itemClickRedirect, item)\n                      }}\n                      key={index}\n                    >\n                      {tableData.map((data, index) => (\n                        <td key={index}>{item[data.key]}</td>\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </Col>\n          </Row>\n\n          <Pagination className='pagination' {...paginationConfig} />\n          <div className='pagination-results'>\n            <label>\n              {numberOfItemsPerPage > 0 ? `${current} of ${total}` : '0 of 0'}\n            </label>\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default PaginationTable\n","import React from 'react'\n\nimport PaginationTable from 'rbtpagination'\nimport 'rbtpagination/dist/index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n// Data to be used to populate table\nconst data = [\n  { name: 'Peter', email: 'peter@peter.com', address: '1 Smith St' },\n  { name: 'Shailesh', email: 'shailesh@shailesh.com', address: '1 Collins St' },\n  { name: 'Glen', email: 'glen@glen.com', address: '1 King St' }\n]\n\n// Here you can specify what properties you want to search by\n// label is what is to be displayed as option in dropdown list\nconst searchBy = [\n  [\n    { label: 'Name', key: 'name' },\n    { label: 'Email', key: 'email' }\n  ]\n]\n// Here you can specify which keys of dataset you want to display and label is\n// The table column heading\n\nconst tableData = [\n  { label: 'Name', key: 'name' },\n  { label: 'Email', key: 'email' },\n  { label: 'Street Address', key: 'address' }\n]\nconst App = () => {\n  return (\n    <PaginationTable\n      dataSet={data}\n      searchData={searchBy}\n      tableData={tableData}\n      handleItemClick={false}\n      itemClickRedirect={false}\n      itemsPerPage={10}\n    />\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}